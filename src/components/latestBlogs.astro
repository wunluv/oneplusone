---
import { ghostClient, getGhostImgPath, fetchSettings } from '../lib/ghost';
import type { Settings } from '@tryghost/content-api';
import { Image } from "astro:assets";

type BlogPost = {
  id: string;
  title: string;
  feature_image: string;
  feature_image_alt?: string;
  slug: string;
  tags: any[]; // Replace 'any' with a more specific type if available
  authors: any[]; // Replace 'any' with a more specific type if available
  published_at: string;
  reading_time: number;
};

export interface Props {
  number_of_posts?: number;
}
const { number_of_posts = 6 } = Astro.props;
// Fetch the latest blog posts from Ghost
let posts: BlogPost[] = []; // Use the BlogPost type for the posts array
try {
  const fetchedPosts = await ghostClient.posts.browse({ limit: number_of_posts, order: 'published_at DESC', include: 'authors,tags' });
  posts = fetchedPosts.map((post) => ({
    id: post.id,
    title: post.title,
    feature_image: post.feature_image,
    feature_image_alt: post.feature_image_alt,
    slug: post.slug,
    tags: post.tags,
    authors: post.authors,
    published_at: post.published_at,
    reading_time: post.reading_time,
  }));
} catch (err) {
  console.error(err);
}

// Fetch the settings from Ghost
let settings: Settings;
try {
  settings = await fetchSettings();
} catch (err) {
  console.error(err);
}


---

<style>
  .post-card-image {
    width: 400px;
    height: 200px;
    background: #c5d2d9 no-repeat center center;
    object-fit: cover;
  }
  .post-details {
    display: flex;
    flex-direction: column;
  }
  .author-info {
    display: flex;
    align-items: center;
  }
  .author-image {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    margin-right: 10px;
  }
  .tags {
    margin-top: 10px;
  }
  .tag {
    display: inline-block;
    background: #e0e0e0;
    border-radius: 3px;
    padding: 2px 5px;
    margin-right: 5px;
  }
</style>

<div class="bg-gray-50">
  <div class="max-w-screen-xl mx-auto pt-16 pb-4 px-4">
    <h2 class="text-3xl leading-9 font-extrabold text-gray-900">
      Last {number_of_posts} entries from the Blog
    </h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    {posts && posts.length > 0 ? (
      posts.map(post => {
        const postImage = getGhostImgPath(settings.url, post.feature_image, 100);
        // Print the data to the browser

        // Debugging logs
        console.log("Settings URL:", settings.url);
        console.log("Post Feature Image:", post.feature_image);
        console.log("Generated Post Image:", postImage);
        return (
        <div class="flex flex-col" key={post.id}>

          <!-- todo Change the image url to a local one later*/ -->
            <Image
              src={postImage || 'http://localhost:2368/content/images/wordpress/2013/05/dreamstime_xs_12977880_3.jpg'}
              alt={post.feature_image_alt || post.title}
              class="post-card-image mb-2 mt-10"
               widths={[400]}
              inferSize
            />
            <span class="uppercase text-xs">
              {post.tags.length > 0 ? (
                <a href={`/tags/${post.tags[0].slug}`}>{post.tags[0].name}</a>
              ) : null}
            </span>
            <p class="text-xl mb-3">
            <a href={`/${post.slug}`} class="underline text-book-gray hover:bg-book-yellow transition ease-in-out duration-300">{post.title}</a>
            </p>
          <div class="post-details flex">
            <div class="author-info flex items-center">
              <img
                src={post.authors[0].profile_image}
                alt={post.authors[0].name}
                class="w-10 h-10 rounded-full object-cover author-image mr-2"
              />
            <div class="flex flex-col text-xs text-gray-500">
            <span class="mr-2">{post.authors[0].name}</span>
            <span class="mr-2">{new Date(post.published_at).toLocaleString('en-US', { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' })}</span>
            <span>{post.reading_time} min read</span>

            </div>
            </div>

          </div>
        </div>
        );
      })
    ) : (
      <p>No posts available.</p>
    )}
  </div>
</div>
</div>